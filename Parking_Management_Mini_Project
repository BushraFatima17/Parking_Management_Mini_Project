#include<iostream>
#include<fstream>
#include<ctime>
#include<string>
using namespace std;
void vehicle_entry();
void vehicle_exit();
void parking_fee();
void parking_statistics();
void file_handling();
time_t s, e;
int price;
int sum = 0;
struct node
{
	string reg_num;
	string driver_name;
	string model;
	string make;
	string colour;
	node* nptr;
};
node* fptr = NULL;
int main()
{
	int x;
	char check;
	fstream file;
	file.open("parking_system.txt", ios::in);
	node* ptr = new node;
	if (!file)
	{
		cout << "file not created" << endl;

	}
	else
	{

		cout << "file successfully created\n";
		string ch;
		while (!file.eof())
		{
			file >> ch;
			node* ptr = new node;
			file >> ptr->reg_num >> ptr->driver_name >> ptr->model >> ptr->make >> ptr->colour;
			if (fptr == NULL)
			{
				fptr = ptr;
				ptr->nptr = NULL;
			}
			else
			{
				node* currentptr = fptr;
				while (currentptr->nptr != NULL)
					currentptr = currentptr->nptr;
				currentptr->nptr = ptr;
				ptr->nptr = NULL;
			}
			
		}
	}
	for (;;)
	{
		cout << "MAIN MENU\n";
		cout << "PRESS 1 FOR VEHICLE ENTRY\nPRESS 2 FOR VEHICLE EXIT\nPRESS 3 TO CHECK PARKING FEE COLLECTED\nPRESS 4 TO CHECK PARKING STATISTICS\nPRESS 5 TO EXIT\n";
		cout << "PLEASE ENTER ONE OF  THE OPTIONS\n";
		cin >> x;
		if (x == 1)
			vehicle_entry();
		else if (x == 2)
			vehicle_exit();
		else if (x == 3)
			parking_fee();
		else if (x == 4)
			parking_statistics();
		else
		{
			file_handling();
			exit(0);
		}

	}
}
void vehicle_entry()
{
	node* ptr = new node;
	if (fptr == NULL)
	{
		cout << "VEHICLE REGISTRATION NUMBER: ";
		cin >> ptr->reg_num;
		cout << "DRIVER NAME: ";
		cin >> ptr->driver_name;
		cout << "VEHICLE MODEL: ";
		cin >> ptr->model;
		cout << "VEHICLE MAKE: ";
		cin >> ptr->make;
		cout << "VEHICLE COLOUR: ";
		cin >> ptr->colour;
		cout << endl;
		time(&s);
		ptr->nptr = NULL;
		fptr = ptr;
	}
	else
	{
		node* currentptr = fptr;
		while (currentptr->nptr != NULL)
		{
			currentptr = currentptr->nptr;
		}
		cout << "VEHICLE REGISTRATION NUMBER: ";
		cin >> ptr->reg_num;
		cout << "DRIVER NAME: ";
		cin >> ptr->driver_name;
		cout << "VEHICLE MODEL: ";
		cin >> ptr->model;
		cout << "VEHICLE MAKE: ";
		cin >> ptr->make;
		cout << "VEHICLE COLOUR: ";
		cin >> ptr->colour;
		cout << endl;
		time(&s);
		currentptr->nptr = ptr;
		ptr->nptr = NULL;

	}
}
void parking_statistics()
{
	node* currentptr = fptr;
	cout << "THE CARS PRESENT IN THE PARKING LOT ARE : \n";
	while (currentptr != NULL)
	{
		cout << "VEHICLE REGISTRATION NUMBER: ";
		cout << currentptr->reg_num << "\n";
		currentptr = currentptr->nptr;
	}
	if (fptr == NULL)
		cout << "No item found\n";

}
void vehicle_exit()
{
	int flag = 0;
	string y;
	cout << "PLEASE ENTER THE REGISTERATION NUMBER OF THE CAR THAT HAS LEFT THE PARKING LOT : ";
	cin >> y;
	node* currentptr = fptr;
	while (currentptr != NULL)
	{
		if (currentptr->reg_num == y)
		{
			flag = 1;
			break;
		}
		currentptr = currentptr->nptr;
	}
	if (flag == 1)
	{
		cout << "THE CAR WITH REGISTERATION NUMBER : " << currentptr->reg_num << " HAS JUST LEFT THE PARKING LOT\n";
		int d = difftime(e, s);
		if (d < 60)
			price = 50;
		else
			price = 70;
		sum += price;
	}
	else
	{
		cout << "THIS CAR IS NOT PRESENT IN THE PARKING LOT\n";
	}
	node* newptr = new node;
	currentptr = fptr;

	if (fptr->reg_num == y)
	{
		newptr = fptr;
		fptr = fptr->nptr;
		delete newptr;
	}
	else
	{
		while (currentptr != NULL)
		{
			if (currentptr->nptr->reg_num == y)
			{
				newptr = currentptr->nptr;
				currentptr->nptr = currentptr->nptr->nptr;
				delete newptr;
				break;
			}
			currentptr = currentptr->nptr;
		}
	}

}
void parking_fee()
{
	cout << "TOTAL PARKING FEE COLLECTED IS : ";
	cout << sum;
	cout << endl;
}
void file_handling()
{
	fstream file;
	file.open("parking_system.txt", ios::out | ios::app);
	if (!file)
	{
		cout << "file not created" << endl;
	}
	else
	{
		cout << "file successfully created" << endl;
		node* ptr = fptr;
		while (ptr != NULL)
		{
			file << "-" << endl;
			file << ptr->reg_num << endl;
			file << ptr->driver_name << endl;
			file << ptr->make << endl;
			file << ptr->model << endl;
			file << ptr->colour << endl;
			
			ptr = ptr->nptr;
		}

	}
}
